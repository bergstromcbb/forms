'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Checkboxes = function (_React$Component) {
    _inherits(Checkboxes, _React$Component);

    function Checkboxes() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Checkboxes);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Checkboxes.__proto__ || Object.getPrototypeOf(Checkboxes)).call.apply(_ref, [this].concat(args))), _this), _this.item = function (_ref2) {
            var input = _ref2.input,
                label = _ref2.label;
            return React.createElement(
                'label',
                null,
                React.createElement('input', _extends({ type: 'checkbox' }, input)),
                React.createElement(
                    'span',
                    null,
                    label
                )
            );
        }, _this.handleChange = function (_ref3) {
            var option = _ref3.option;
            return function (event) {
                var _this$props = _this.props,
                    _this$props$value = _this$props.value,
                    value = _this$props$value === undefined ? [] : _this$props$value,
                    onChange = _this$props.onChange;


                var arr = [].concat(_toConsumableArray(value));
                if (event.target.checked) {
                    arr.push(option.value);
                } else {
                    arr.splice(arr.indexOf(option.value), 1);
                }

                if (onChange) {
                    return onChange(arr);
                }
            };
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Checkboxes, [{
        key: 'getLabelAndValue',
        value: function getLabelAndValue(option) {
            var _props = this.props,
                textField = _props.textField,
                valueField = _props.valueField;


            if (typeof option === 'string') {
                return { label: option, value: option };
            }

            return {
                label: option[textField],
                value: option[valueField]
            };
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props,
                _props2$itemComponent = _props2.itemComponent,
                itemComponent = _props2$itemComponent === undefined ? this.item : _props2$itemComponent,
                _props2$data = _props2.data,
                data = _props2$data === undefined ? [] : _props2$data,
                values = _props2.value;


            var checkboxes = data.map(function (option, index) {
                var _option = option = _this2.getLabelAndValue(option),
                    label = _option.label,
                    value = _option.value;

                var key = 'checkbox-' + index;

                return React.createElement(itemComponent, {
                    input: {
                        onChange: _this2.handleChange({ option: option }),
                        checked: ~values.indexOf(value),
                        value: value
                    },
                    label: label, option: option, data: data, key: key
                });
            });

            return React.createElement(
                'div',
                null,
                checkboxes
            );
        }
    }]);

    return Checkboxes;
}(React.Component);

exports.default = Checkboxes;


Checkboxes.propTypes = {
    data: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.shape({
        label: _propTypes2.default.node.isRequired,
        value: _propTypes2.default.node.isRequired
    })), _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,
    itemComponent: _propTypes2.default.func,
    textField: _propTypes2.default.string,
    valueField: _propTypes2.default.string
};

Checkboxes.defaultProps = {
    textField: 'label',
    valueField: 'value'
};